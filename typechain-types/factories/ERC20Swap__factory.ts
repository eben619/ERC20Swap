/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ERC20Swap, ERC20SwapInterface } from "../ERC20Swap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1Address",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token1Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2Address",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109323803806109328339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b6107c68061016c6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632456af8214610046578063d3986f0814610064578063d7cb416f14610080575b600080fd5b61004e61009e565b60405161005b91906103f7565b60405180910390f35b61007e60048036038101906100799190610479565b6100c4565b005b610088610392565b60405161009591906103f7565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008211610107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fe90610516565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050838273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161018e91906103f7565b602060405180830381865afa1580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf919061054b565b1015610210576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610207906105c4565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161024d939291906105f3565b6020604051808303816000875af115801561026c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102909190610662565b6102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c6906106db565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff1660e01b815260040161030a9291906106fb565b6020604051808303816000875af1158015610329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034d9190610662565b61038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038390610770565b60405180910390fd5b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103e1826103b6565b9050919050565b6103f1816103d6565b82525050565b600060208201905061040c60008301846103e8565b92915050565b600080fd5b6000819050919050565b61042a81610417565b811461043557600080fd5b50565b60008135905061044781610421565b92915050565b610456816103d6565b811461046157600080fd5b50565b6000813590506104738161044d565b92915050565b600080604083850312156104905761048f610412565b5b600061049e85828601610438565b92505060206104af85828601610464565b9150509250929050565b600082825260208201905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b60006105006020836104b9565b915061050b826104ca565b602082019050919050565b6000602082019050818103600083015261052f816104f3565b9050919050565b60008151905061054581610421565b92915050565b60006020828403121561056157610560610412565b5b600061056f84828501610536565b91505092915050565b7f496e73756666696369656e742062616c616e6365206f6620746f6b656e310000600082015250565b60006105ae601e836104b9565b91506105b982610578565b602082019050919050565b600060208201905081810360008301526105dd816105a1565b9050919050565b6105ed81610417565b82525050565b600060608201905061060860008301866103e8565b61061560208301856103e8565b61062260408301846105e4565b949350505050565b60008115159050919050565b61063f8161062a565b811461064a57600080fd5b50565b60008151905061065c81610636565b92915050565b60006020828403121561067857610677610412565b5b60006106868482850161064d565b91505092915050565b7f4661696c656420746f207472616e7366657220746f6b656e3100000000000000600082015250565b60006106c56019836104b9565b91506106d08261068f565b602082019050919050565b600060208201905081810360008301526106f4816106b8565b9050919050565b600060408201905061071060008301856103e8565b61071d60208301846105e4565b9392505050565b7f4661696c656420746f207472616e7366657220746f6b656e3200000000000000600082015250565b600061075a6019836104b9565b915061076582610724565b602082019050919050565b600060208201905081810360008301526107898161074d565b905091905056fea2646970667358221220024f9fbe499644c0c9d1a8f3e73efa380577be2a771b1606916199ceeefb3c5964736f6c63430008180033";

type ERC20SwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20SwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Swap__factory extends ContractFactory {
  constructor(...args: ERC20SwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token1Address: AddressLike,
    _token2Address: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _token1Address,
      _token2Address,
      overrides || {}
    );
  }
  override deploy(
    _token1Address: AddressLike,
    _token2Address: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _token1Address,
      _token2Address,
      overrides || {}
    ) as Promise<
      ERC20Swap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Swap__factory {
    return super.connect(runner) as ERC20Swap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20SwapInterface {
    return new Interface(_abi) as ERC20SwapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Swap {
    return new Contract(address, _abi, runner) as unknown as ERC20Swap;
  }
}
